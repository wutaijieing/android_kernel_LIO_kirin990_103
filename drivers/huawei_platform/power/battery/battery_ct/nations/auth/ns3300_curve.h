/* SPDX-License-Identifier: GPL-2.0 */
/*
 * ns3300_curve.h
 *
 * ns3300 curve
 *
 * Copyright (c) 2021-2021 Huawei Technologies Co., Ltd.
 *
 * This software is licensed under the terms of the GNU General Public
 * License version 2, as published by the Free Software Foundation, and
 * may be copied, distributed, and modified under those terms.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 */

#ifndef _NS3300_CURVE_H_
#define _NS3300_CURVE_H_

#include <linux/types.h>

#define ECDSA_SHA            256
#define GF2_163              163 /* sizes of finite fields GF(2^n) */
#define GFP_256              256 /* sizes of finite fields GF(p) */
#define array_blen(A)        (((A) + 7) / 8)
#define double_array_blen(A) (2 * (((A) + 7) / 8))
#define array_wlen(A)        (((A) + 31) / 32)
#define double_array_wlen(A) ((2 * (A) + 31) / 32)

/* Cert curve - GFp_256: Brainpool-p256r1 */
static const uint8_t ecp_256_p[array_blen(GFP_256)] = {
	0xA9, 0xFB, 0x57, 0xDB, 0xA1, 0xEE, 0xA9, 0xBC, 0x3E, 0x66, 0x0A, 0x90,
	0x9D, 0x83, 0x8D, 0x72, 0x6E, 0x3B, 0xF6, 0x23, 0xD5, 0x26, 0x20, 0x28,
	0x20, 0x13, 0x48, 0x1D, 0x1F, 0x6E, 0x53, 0x77
};

static const uint8_t ecp_256_a[array_blen(GFP_256)] = {
	0x7D, 0x5A, 0x09, 0x75, 0xFC, 0x2C, 0x30, 0x57, 0xEE, 0xF6, 0x75, 0x30,
	0x41, 0x7A, 0xFF, 0xE7, 0xFB, 0x80, 0x55, 0xC1, 0x26, 0xDC, 0x5C, 0x6C,
	0xE9, 0x4A, 0x4B, 0x44, 0xF3, 0x30, 0xB5, 0xD9
};

static const uint8_t ecp_256_b[array_blen(GFP_256)] = {
	0x26, 0xDC, 0x5C, 0x6C, 0xE9, 0x4A, 0x4B, 0x44, 0xF3, 0x30, 0xB5, 0xD9,
	0xBB, 0xD7, 0x7C, 0xBF, 0x95, 0x84, 0x16, 0x29, 0x5C, 0xF7, 0xE1, 0xCE,
	0x6B, 0xCC, 0xDC, 0x18, 0xFF, 0x8C, 0x07, 0xB6
};

static const uint8_t ecp_256_gx[array_blen(GFP_256)] = {
	0x8B, 0xD2, 0xAE, 0xB9, 0xCB, 0x7E, 0x57, 0xCB, 0x2C, 0x4B, 0x48, 0x2F,
	0xFC, 0x81, 0xB7, 0xAF, 0xB9, 0xDE, 0x27, 0xE1, 0xE3, 0xBD, 0x23, 0xC2,
	0x3A, 0x44, 0x53, 0xBD, 0x9A, 0xCE, 0x32, 0x62
};

static const uint8_t ecp_256_gy[array_blen(GFP_256)] = {
	0x54, 0x7E, 0xF8, 0x35, 0xC3, 0xDA, 0xC4, 0xFD, 0x97, 0xF8, 0x46, 0x1A,
	0x14, 0x61, 0x1D, 0xC9, 0xC2, 0x77, 0x45, 0x13, 0x2D, 0xED, 0x8E, 0x54,
	0x5C, 0x1D, 0x54, 0xC7, 0x2F, 0x04, 0x69, 0x97
};

static const uint8_t ecp_256_n[array_blen(GFP_256)] = {
	0xA9, 0xFB, 0x57, 0xDB, 0xA1, 0xEE, 0xA9, 0xBC, 0x3E, 0x66, 0x0A, 0x90,
	0x9D, 0x83, 0x8D, 0x71, 0x8C, 0x39, 0x7A, 0xA3, 0xB5, 0x61, 0xA6, 0xF7,
	0x90, 0x1E, 0x0E, 0x82, 0x97, 0x48, 0x56, 0xA7
};

static const uint8_t ecp_256_h[1] = {
	0x01
};

static const uint8_t ecp_256_publickey[1 + double_array_blen(GFP_256)] = {
	0x04, 0x1E, 0x42, 0x39, 0xF2, 0x4A, 0xB8, 0x02, 0xEE, 0xE1, 0x1B, 0x92,
	0x04, 0xA6, 0xB4, 0x99, 0x64, 0x6F, 0x86, 0x04, 0x71, 0x42, 0x49, 0xE5,
	0x42, 0x05, 0xF1, 0xA8, 0x3F, 0x67, 0x1B, 0xE4, 0xD8, 0x88, 0xB1, 0x47,
	0x6F, 0x9C, 0xDA, 0xAD, 0x0A, 0x29, 0x0A, 0x45, 0x44, 0xFD, 0x93, 0x47,
	0xEA, 0xA2, 0x22, 0xCF, 0xFA, 0x32, 0x5D, 0xB8, 0xCA, 0xB6, 0xE6, 0xCB,
	0xAE, 0x3A, 0x98, 0x0B, 0xD8
};

/* Sign curve - GF2_163: sect163k1 */

#endif /* _NS3300_CURVE_H_ */
